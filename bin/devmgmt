#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Device Manager for NanoHome - manages MQTT Devices on Grafana Dashboards
#/////////////////////////////////////////////////////////////////////////////////////

# Catch Parameters
sn="$2"
desc="$3"
device="$4"
devicetype="$5"
random="$(date +%s)"

# Settings
home_uid="$(grep 'home_uid' /opt/nanohome/conf/uids | cut -d: -f2)"
devmgr_uid="$(grep 'devmgr_uid' /opt/nanohome/conf/uids | cut -d: -f2)"
zsp_uid="$(grep 'zsp_uid' /opt/nanohome/conf/uids | cut -d: -f2)"
settings_uid="$(grep 'settings_uid' /opt/nanohome/conf/uids | cut -d: -f2)"
api_key="$(cat /opt/nanohome/conf/api_key.json | jq -r '.key')"
rootpath="INSTALLDIR"
template_folder="$rootpath/templates"

# Help Functions
get_dashboard () {
	
	uid="$1"
	curl -X GET -H "Authorization: Bearer $api_key" -H "Content-Type: application/json" http://localhost:3000/api/dashboards/uid/"$uid" > /tmp/merge_panel_temp.json
}

add_json_options () {

	folderid="$(cat /tmp/merge_panel_output.json | grep folderId | awk '{ sub(/^[ \t]+/, ""); print }')"
	json_data="{ ${folderid} \"overwrite\": true }"

	jq --argjson options "$json_data" '. += $options' /tmp/merge_panel_output.json > /tmp/merge_panel_final.json
}

update_dashboard () {

	curl -X POST --insecure -H "Authorization: Bearer $api_key" -H "Content-Type: application/json" -d @/tmp/merge_panel_final.json http://localhost:3000/api/dashboards/db > /dev/null 2>&1
}

#/////////////////////////////////////////////////////////////////////////////////////
# Show Devices
#/////////////////////////////////////////////////////////////////////////////////////
show_devices () {

	msg="$(cat $rootpath/devlist | awk -F':' '{printf "<font color='hotpink'>"$2 ":</font> " $1 "<br>"}')"
	statusmsg "Geräteliste" "white" "" "" "$msg" "white"
	exit 0

}

#/////////////////////////////////////////////////////////////////////////////////////
# Add Device
#/////////////////////////////////////////////////////////////////////////////////////
add_device () {

	# add device to devlist
	echo -e "$sn:$desc:$device:$devicetype" >> $rootpath/devlist
	
	# check compatibility (TBD)
	if [ "$1" = "add" ]; then
		$rootpath/dev_compatibility
	fi
	
	# Fill Dropdown in Devicemanager Dashboard //////////////////////////////////////////////////
	get_dashboard "$devmgr_uid"
	jq . /tmp/merge_panel_temp.json > /tmp/merge_panel_output.json
	sed -i 's#name=\\"nanolist\\">#name=\\"nanolist\\">\\r\\n\\t<option value=\\"http://'$sn'.nano.lan\\">'"$desc"'</option>#g' /tmp/merge_panel_output.json
	add_json_options;
	pdate_dashboard
	rm /tmp/merge_panel_*

	# Fill Dropdown in Settings Dashboard //////////////////////////////////////////////////
	get_dashboard "$settings_uid"
	jq . /tmp/merge_panel_temp.json > /tmp/merge_panel_output.json
	sed -i 's#...Geräteliste...</option>#...Geräteliste...</option>\\r\\n\\t<option value=\\"'$sn'\\">'"$desc"'</option>#g' /tmp/merge_panel_output.json
	add_json_options
	update_dashboard
	rm /tmp/merge_panel_*
	
	# add home-dash element if device is a switch or a rollo
	if [ "$devicetype" == "switch" ] || [ "$devicetype" == "roller" ] || [ "$devicetype" == "shutter" ]; then

		# Create Button on Home Dashboard //////////////////////////////////////////////////
		# create new element from template
		if [ "$devicetype" == "switch" ]; then
			cp $template_folder"/"$device"_switch.json.template" "/tmp/merge_panel_input.json"
		elif [ "$devicetype" == "roller" ]; then
			cp $template_folder"/"$device"_roller.json.template" "/tmp/merge_panel_input.json"
		elif [ "$devicetype" == "shutter" ]; then
			cp $template_folder"/"$device"_shutter.json.template" "/tmp/merge_panel_input.json"
		fi
		
		sed -i 's/_DEVID_/'$sn'/g'  /tmp/merge_panel_input.json
		sed -i 's/_DESCRIPTION_/'"$desc"'/g'  /tmp/merge_panel_input.json
		sed -i 's/_RAND_/'$random'/g'  /tmp/merge_panel_input.json

		# merge new Button into Dashboard
		get_dashboard "$home_uid"
		jq --argjson panel "$(</tmp/merge_panel_input.json)" '.dashboard.panels += [$panel]' /tmp/merge_panel_temp.json > /tmp/merge_panel_output.json
		add_json_options
		update_dashboard
		rm /tmp/merge_panel_*
		
	fi
	
	# Add Switch specific Elements //////////////////////////////////////////////////

	if [ "$devicetype" == "switch" ] || [ "$devicetype" == "roller" ] || [ "$devicetype" == "shutter" ]; then
		
		# Dropdown on Timer Dashboard
		
		# get timer dashboard & make it readable
		get_dashboard "$zsp_uid"
		jq . /tmp/merge_panel_temp.json > /tmp/merge_panel_output.json
		
		# add new option to timer dropdown
		sed -i 's#name=\\"nanolist_timer\\">#name=\\"nanolist_timer\\">\\r\\n\\t<option value=\\"'$sn'\\">'"$desc"'</option>#g' /tmp/merge_panel_output.json

		# add new option to multiswitch dropdown
		sed -i 's#Wenn...</option>#Wenn...</option>\\r\\n\\t<option value=\\"'$sn'\\">'"$desc"'</option>#g' /tmp/merge_panel_output.json
		sed -i 's#Dann...</option>#Dann...</option>\\r\\n\\t<option value=\\"'$sn'\\">'"$desc"'</option>#g' /tmp/merge_panel_output.json
		
		# add new option to standbykiller dropdown
		if [ "$devicetype" == "switch" ]; then
		
			sed -i 's#name=\\"nanolist_stbykill\\">#name=\\"nanolist_stbykill\\">\\r\\n\\t<option value=\\"'$sn'\\">'"$desc"'</option>#g' /tmp/merge_panel_output.json
		
		fi
		
		add_json_options
		update_dashboard
		rm /tmp/merge_panel_*
	fi
	
	# message
	statusmsg "Device Manager " "white" "" "" "$desc:" "hotpink" " $sn hinzugefügt" "white"
	exit 0

}

#/////////////////////////////////////////////////////////////////////////////////////
# Remove Device
#/////////////////////////////////////////////////////////////////////////////////////
remove_device () {

	# remove services and timers
	cronman remove "$sn"
	multiswitch remove "$sn"
	standbykiller remove "$sn"
	
	# remove device from devlist
	sed -i '/'$sn'/d' $rootpath/devlist
	
	# Remove from Devicemanager Dashboard //////////////////////////////////////////////////
	get_dashboard "$devmgr_uid"
	jq . /tmp/merge_panel_temp.json > /tmp/merge_panel_output.json
	sed -i 's#\\r\\n\\t<option value=\\"http://'$sn'.nano.lan\\">'"$desc"'</option>##g' /tmp/merge_panel_output.json
	add_json_options
	update_dashboard
	rm /tmp/merge_panel_*

	# Remove from Settings Dashboard //////////////////////////////////////////////////	
	get_dashboard "$settings_uid"
	jq . /tmp/merge_panel_temp.json > /tmp/merge_panel_output.json
	sed -i 's#\\r\\n\\t<option value=\\"'$sn'\\">'"$desc"'</option>##g' /tmp/merge_panel_output.json
	add_json_options
	update_dashboard
	rm /tmp/merge_panel_*
	
	# Remove from Timer Dashboard //////////////////////////////////////////////////
	get_dashboard "$zsp_uid"
	jq . /tmp/merge_panel_temp.json > /tmp/merge_panel_output.json
	# if device found
	if cat /tmp/merge_panel_output.json | grep "$sn" > /dev/null 2>&1 ; then
		sed -i 's#\\r\\n\\t<option value=\\"'$sn'\\">'"$desc"'</option>##g' /tmp/merge_panel_output.json
		add_json_options
		update_dashboard
	fi
	rm /tmp/merge_panel_*
	
	# message
	statusmsg "Device Manager " "white" "" "" "$desc:" "hotpink" " $sn gelöscht <br> Button auf Home-Dashboard manuell löschen" "white"
	exit 0

}

#/////////////////////////////////////////////////////////////////////////////////////
# Main
#/////////////////////////////////////////////////////////////////////////////////////
if [ "$1" = "show" ]; then
	
	show_devices

elif [ "$1" = "add" ] && [ ! -z "$sn" ] && [ ! -z "$desc" ] && [ ! -z "$device" ] && [ ! -z "$devicetype" ] && [ ! "$sn" = "Device ID" ] && [ ! "$desc" = "Bezeichnung" ]; then

	add_device

elif [ "$1" = "remove" ] && [ ! -z "$sn" ] && [ ! -z "$desc" ]; then

	remove_device

#/////////////////////////////////////////////////////////////////////////////////////
# Err Exit
#/////////////////////////////////////////////////////////////////////////////////////
else

	statusmsg "Error" "red" "" "" "Eingabe prüfen" "white"
	exit 1

fi