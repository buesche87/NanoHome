#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Multiswitch for NanoHome - multi-toggle devices
#/////////////////////////////////////////////////////////////////////////////////////

# Catch Parameters
dev1="$2"
dev2="$3"
value1="toggle"
value2="toggle"
rec="$4"
from="$5"
to="$6"
if [ "$rec" = "Aktiv..." ]; then rec="always"; fi
if [ "$dev1" = "$dev2" ]; then dev1="all"; fi
rootpath="INSTALLDIR"

# Exit if
if [ "$dev1" = "Wenn..." ] || [ "$dev2" = "Dann..." ]; then exit 1; fi

# Device Support
if [ ! "$1" = "remove" ] && [ ! "$dev1" = "all" ]; then
	. $rootpath/dev_compatibility $dev1
fi

# Environment
svcname="multiswitch.$dev1.$value1.$dev2.$value2.service"
svclocation="~/.config/systemd/user"
svcfile="$svclocation/$svcname"
svctemplate="$rootpath/templates/multiswitch.service.template"


#/////////////////////////////////////////////////////////////////////////////////////
# Print Multiswitches and their Cronjobs On Dashboard
#/////////////////////////////////////////////////////////////////////////////////////
printsvc () {

	# get description of devices from devlist
	svcname="$1"
	description="$( grep Description $svclocation/$svcname | cut -d= -f2 )"
	
	echo "<font size='4' color='hotpink'>$description</font>"

	# print last messages from service
	if systemctl --user is-active $svcname ; then
		
		lastmsg="$(systemctl --user status $svcname | tail -5 | sort -r | grep '|' | cut -d'|' -f 2 )"

		echo ""
		echo "Last Messages:"
		echo "<font size='2'>$lastmsg</font>"
		echo ""

	fi

}

#/////////////////////////////////////////////////////////////////////////////////////
# Show Multiswitches
#/////////////////////////////////////////////////////////////////////////////////////
if [ "$1" = "show" ]; then

	active="$( ls $svclocation | grep multiswitch )"
	
	if [ ! -z "$active" ]; then
		
		echo "<font size='5' color='white'>Multiswitch</font><br>"
		
		while IFS= read -r line
		do

			printsvc "$line"

		done <<< "$active"

	else

		statusmsg "Multiswitch" "white" " inaktiv" "grey" "Kein Multiswitch aktiv" "grey"

	fi

#/////////////////////////////////////////////////////////////////////////////////////
# Add Multiswitch
#/////////////////////////////////////////////////////////////////////////////////////
elif [ "$1" = "add" ] && [ ! "$dev1" = "all" ]; then

	# Check if service exists
	if test -f "$svcfile"; then
		
		statusmsg "Multiswitch" "white" "" "" "Service exists" "white"
		printsvc "$svcname"

	# create service
	else
		
		# Copy Service File from a template and modify it
		cp $svctemplate $svcfile

		sed -i "s/-dev1/$dev1/" $svcfile
		sed -i "s/-dev2/$dev2/" $svcfile
		sed -i "s/-value1/$value1/" $svcfile
		sed -i "s/-value2/$value2/" $svcfile		
		
		# Enable and Start Service
		systemctl --user start $svcname
		systemctl --user enable $svcname

		# Print Multiswitch on Dashboard
		printsvc "$svcname"

	fi

#/////////////////////////////////////////////////////////////////////////////////////
# Remove Multiswitch
#/////////////////////////////////////////////////////////////////////////////////////
elif [ "$1" = "remove" ] && [ ! -z "$dev1" ] && [ ! "$dev1" = "$dev2" ]; then

	# remove all services if only one device is set
	if [ "$dev2" == "" ]; then 
		svcname="ls $svclocation | grep multiswitch | grep $dev1"
	fi

	# Delete Multiswitch
	while IFS= read -r line
	do
		systemctl --user stop "$line"
		systemctl --user disable "$line"

		rm -r "$svclocation/$line"

	done <<< "$svcname"

	statusmsg "Multiswitch" "white" " $dev1" "hotpink" " deaktiviert" "grey"

#/////////////////////////////////////////////////////////////////////////////////////
# Exit 1
#/////////////////////////////////////////////////////////////////////////////////////
else

	statusmsg "Error" "red" "" "" "Eingabe prÃ¼fen" "white"
	exit 1

fi
