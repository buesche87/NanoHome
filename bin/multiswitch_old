#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Multiswitch for NanoHome - multi-toggle devices
#/////////////////////////////////////////////////////////////////////////////////////

# Catch Parameters
dev1="$2"
dev2="$3"
value1="toggle"
value2="toggle"
rec="$4"
if [ "$rec" = "Aktiv..." ]; then rec="always"; fi
from="$5"
to="$6"
rootpath="INSTALLDIR"

# Exit If
if [ "$dev1" = "Wenn..." ] || [ "$dev2" = "Dann..." ]; then exit 1; fi

# Device Support
if [ ! "$1" = "remove" ] && [ ! "$dev1" = "all" ]; then
	. $rootpath/dev_compatibility $dev1
	dev1_type=$(echo $dev_type)

fi

# Environment
service_name="multiswitch.$dev1.$value1.$dev2.$value2.service"
service_file="/lib/systemd/system/$service_name"
service_template="$rootpath/templates/multiswitch.service.template"

# Help Functions
get_status () {

	# make parameters readable on dashboard
	if systemctl status $service_name | grep "running" 1>/dev/null 2>&1; then
		statuscolor="#c0fcb1"
		statmsg="aktiv"
	else
		statuscolor="grey"
		statmsg="inaktiv"
	fi

}

#/////////////////////////////////////////////////////////////////////////////////////
# Print Multiswitches and their Cronjobs On Dashboard
#/////////////////////////////////////////////////////////////////////////////////////
print_switch () {

	display="$1"
	servicestat="$(systemctl status $service_name | head -3 | tail -1 | sed -e 's/^[[:space:]]*//')"
	
	# get description of devices from devlist
	desc1="$(cat $rootpath/devlist | grep $dev1 | cut -d: -f2 )"
	desc2="$(cat $rootpath/devlist | grep $dev2 | cut -d: -f2 )"

	get_status

	# get cronjob for multiswitch
	zsp="$(crontab -l | grep $service_name)"

	# print cronjob if enabled
	if [ ! -z "$service_name" ] && [ ! -z "$zsp" ]; then

		while IFS= read -r line
		 do
			act_msg="aktiv"
			inact_msg="inaktiv"

			dev_state_temp="$(printf '%s\n' "$line" | awk '{ printf $5 ": " $2 ":" $1 " " $7 } ')"
			dev_state="$(echo $dev_state_temp | sed 's,^*: ,Täglich ab ,g' | sed 's,^1: ,Montag ab ,g' | sed 's,^2: ,Dienstag ab ,g' | sed 's,^3: ,Mittwoch ab ,g' | sed 's,^4: ,Donnerstag ab ,g' | sed 's,^5: ,Freitag ab ,g' | sed 's,^6: ,Samstag ab ,g' | sed 's,^0: ,Sonntag ab ,g' | sed 's,^6-7: ,Wochenende ab ,g' | sed 's,^1-5: ,Werktags ab ,g' | sed 's,start,'"$act_msg"',g' | sed 's,stop,'"$inact_msg"',g')"
			
		done < <(printf '%s\n' "$zsp")
		echo ""

	else 
		dev_state=""
	fi
	
	statusmsg "Multiswitch" "white" " $statmsg" "$statuscolor" "$desc1 -> $desc2" "hotpink" "</br>$dev_state" "white"

	# print last messages from service
	if [ ! -z "$service_name" ] && [ ! "$display" = "no" ]; then
		
		lastmsg="$(systemctl status $service_name | tail -5 | sort -r | grep '|' | cut -d'|' -f 2 )"

		echo "<font size='3' color='$statuscolor'>$servicestat</font>"
		echo ""
		echo "Last Messages:"
		echo "<font size='2'>$lastmsg</font>"
		echo ""

	fi

}

#/////////////////////////////////////////////////////////////////////////////////////
# Show Multiswitches
#/////////////////////////////////////////////////////////////////////////////////////
if [ "$1" = "show" ] && [ ! -z "$dev1" ]; then

	# show active state of device
	if test -f "$service_file"; then
		
		print_switch
		
	# show all if devices match or variable contains all
	elif [ "$dev1" = "$dev2" ] || [ "$dev1" = "all" ]; then

		active="$( ls /lib/systemd/system/ | grep multiswitch )"
	
		if [ ! -z "$active" ]; then
			
			while IFS= read -r line
			do
				dev1="$( grep ExecStart /lib/systemd/system/$line | awk '{ printf $3 }' )"
				dev2="$( grep ExecStart /lib/systemd/system/$line | awk '{ printf $4 }' )"
				
				service_name="$line"
				
				print_switch "no"

			done <<< "$active"

		else

			statusmsg "Multiswitch" "white" " inaktiv" "grey" "Kein Multiswitch aktiv" "grey"

		fi

	# show inactive state of device
	else
		
		print_switch "no"

	fi

#/////////////////////////////////////////////////////////////////////////////////////
# Add Multiswitch
#/////////////////////////////////////////////////////////////////////////////////////
elif [ "$1" = "add" ] && [ ! -z "$dev1" ] && [ ! -z "$dev2" ] && [ ! "$dev1" = "$dev2" ]; then

	# Check if service exists
	if test -f "$service_file"; then
		
		statusmsg "Multiswitch" "white" "" "" "Service exists" "white"
		print_switch

	# create service
	else
		
		# Copy Service File from a template and modify it
		cp $service_template $service_file

		sed -i "s/-dev1/$dev1/" $service_file
		sed -i "s/-dev2/$dev2/" $service_file
		sed -i "s/-value1/$value1/" $service_file
		sed -i "s/-value2/$value2/" $service_file		
		
		# Enable and Start Service
		systemctl start $service_name
		systemctl enable $service_name
		
		# Add multiswitch Cronjob
		if [ ! "$rec" = "always" ]; then
			cronman add "$service_name" "$rec" "$from" "$to"
		fi
		
		# Print Multiswitch on Dashboard
		print_switch

	fi

#/////////////////////////////////////////////////////////////////////////////////////
# Remove Multiswitch
#/////////////////////////////////////////////////////////////////////////////////////
elif [ "$1" = "remove" ] && [ ! -z "$dev1" ] && [ ! "$dev1" = "$dev2" ]; then

	# remove all services if only one device is set
	if [ "$dev2" == "" ]; then 
		service_name="ls /lib/systemd/system/ | grep multiswitch | grep $dev1"
	fi

	# Delete Multiswitch
	while IFS= read -r line
	do
		systemctl stop "$line"
		systemctl disable "$line"

		rm -r "/lib/systemd/system/$line"
		cronman remove "$line"

	done <<< "$service_name"
	
	# Print Multiswitch on Dashboard
	print_switch "no"

else

	statusmsg "Error" "red" "" "" "Eingabe prüfen" "white"

	exit 1

fi
